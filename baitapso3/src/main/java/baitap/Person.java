/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package baitap;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"baitap\",\"fields\":[{\"name\":\"FirstName\",\"type\":\"string\"},{\"name\":\"LastName\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence FirstName;
  @Deprecated public java.lang.CharSequence LastName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(java.lang.CharSequence FirstName, java.lang.CharSequence LastName) {
    this.FirstName = FirstName;
    this.LastName = LastName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return FirstName;
    case 1: return LastName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: FirstName = (java.lang.CharSequence)value$; break;
    case 1: LastName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'FirstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return FirstName;
  }

  /**
   * Sets the value of the 'FirstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.FirstName = value;
  }

  /**
   * Gets the value of the 'LastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return LastName;
  }

  /**
   * Sets the value of the 'LastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.LastName = value;
  }

  /** Creates a new Person RecordBuilder */
  public static baitap.Person.Builder newBuilder() {
    return new baitap.Person.Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static baitap.Person.Builder newBuilder(baitap.Person.Builder other) {
    return new baitap.Person.Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static baitap.Person.Builder newBuilder(baitap.Person other) {
    return new baitap.Person.Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.lang.CharSequence FirstName;
    private java.lang.CharSequence LastName;

    /** Creates a new Builder */
    private Builder() {
      super(baitap.Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(baitap.Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.FirstName)) {
        this.FirstName = data().deepCopy(fields()[0].schema(), other.FirstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.LastName)) {
        this.LastName = data().deepCopy(fields()[1].schema(), other.LastName);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(baitap.Person other) {
            super(baitap.Person.SCHEMA$);
      if (isValidValue(fields()[0], other.FirstName)) {
        this.FirstName = data().deepCopy(fields()[0].schema(), other.FirstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.LastName)) {
        this.LastName = data().deepCopy(fields()[1].schema(), other.LastName);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'FirstName' field */
    public java.lang.CharSequence getFirstName() {
      return FirstName;
    }
    
    /** Sets the value of the 'FirstName' field */
    public baitap.Person.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.FirstName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'FirstName' field has been set */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'FirstName' field */
    public baitap.Person.Builder clearFirstName() {
      FirstName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'LastName' field */
    public java.lang.CharSequence getLastName() {
      return LastName;
    }
    
    /** Sets the value of the 'LastName' field */
    public baitap.Person.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.LastName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'LastName' field has been set */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'LastName' field */
    public baitap.Person.Builder clearLastName() {
      LastName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.FirstName = fieldSetFlags()[0] ? this.FirstName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.LastName = fieldSetFlags()[1] ? this.LastName : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
